/***********************************************************  
* Change script to upgrade LibBill database from 1.5 to 2.0 
***********************************************************/

-- If a problem occurs, roll back what we can and exit the script
whenever sqlerror exit rollback;

/***********************************************************  
* Check current version and exit if not right.
***********************************************************/
declare
  required_version application_setting.setting_value%type := '1.5';
begin
  if get_application_setting('version') != required_version then
    raise_application_error(application_errors.INVALID_VERSION, 'Not at required version ' || required_version);
  end if;
end;
/

/***********************************************************  
*
* Ticket 24336: Add view for invoice line items by item code
*
***********************************************************/

/********************
line_item_code_vw view
********************/
create or replace view line_item_code_vw as
select
  li.invoice_number
, ls.item_code
, sum(li.total_price) as total_price
from line_item li
inner join location_service ls on li.location_service_id = ls.location_service_id
group by li.invoice_number, ls.item_code
;
/

-- Create grants
exec allow_access('invoice_service', 'line_item_code_vw', 'select');
-- -- For Analyzer reporting
grant select on line_item_code_vw to ucla_preaddb;

-- END of Ticket 24336: Add view for invoice line items by item code

/***********************************************************  
*
* Ticket 24586: Add logging support for CashNet
*
***********************************************************/

/********************
cashnet_log table
********************/
-- Capture data returned by CashNet, using structure defined by that system
create table cashnet_log (
  ucla_ref_no varchar2(40) not null --the reference ID we create
, result_code varchar2(3) not null  --result value returned by CashNet
, cn_trans_no varchar2(10) not null --Success/failure transaction ID generated by CashNet
, cn_batch_no varchar2(5) not null  --Batch number generated by CashNet
, pmt_code varchar2(6) not null     --Payment type in CashNet; CC=credit card; ACHWEB=echeck
, eff_date date not null            --Effective date in CashNet of transaction
, cn_details varchar2(1000)         --Catch-all for other CashNet fields we may want to review; can be null
, constraint cashnet_log_pk primary key (cn_trans_no)
)
;
-- Extra index for queries
create index cashnet_log_ucla_ref_no_ix on cashnet_log (ucla_ref_no);

/********************
insert_cashnet_log procedure
********************/
create or replace procedure insert_cashnet_log (
  p_ucla_ref_no in cashnet_log.ucla_ref_no%type
, p_result_code in cashnet_log.result_code%type
, p_cn_trans_no in cashnet_log.cn_trans_no%type
, p_cn_batch_no in cashnet_log.cn_batch_no%type
, p_pmt_code in cashnet_log.pmt_code%type
, p_eff_date in cashnet_log.eff_date%type
, p_cn_details in cashnet_log.cn_details%type
, p_user_name in staff_user.user_name%type
) as
  THIS_PROC_NAME constant varchar2(30) := 'insert_cashnet_log';
begin
  if user_has_privilege(p_user_name, THIS_PROC_NAME) = 'N' then
    raise_application_error(application_errors.NOT_ALLOWED, p_user_name || ' cannot run procedure ' || THIS_PROC_NAME);
  end if;

  insert into cashnet_log (ucla_ref_no, result_code, cn_trans_no, cn_batch_no, pmt_code, eff_date, cn_details)
    values (p_ucla_ref_no, p_result_code, p_cn_trans_no, p_cn_batch_no, p_pmt_code, p_eff_date, p_cn_details);

end insert_cashnet_log;
/

-- Define privilege for this procedure
insert into invoice_privilege values ('insert_cashnet_log');
-- Create grants
exec allow_access('invoice_service', 'insert_cashnet_log', 'execute');
-- Define new role
insert into invoice_role values ('e-commerce');
-- Create an internal user for this role
exec insert_staff_user('ecommerce', 'ecommerce', 'crt', 'E-Commerce', 'Internal User', 'e-commerce');
-- Associate this procedure with its role(s)
insert into role_privilege_status (role_name, privilege_name, status) values ('e-commerce', 'insert_cashnet_log', null);
commit;

/********************
cashnet_log_vw view
********************/
create or replace view cashnet_log_vw as
select
  ucla_ref_no
, result_code
, cn_trans_no
, cn_batch_no
, pmt_code
, eff_date
, cn_details
from cashnet_log
;
/

-- Create grants
exec allow_access('invoice_service', 'cashnet_log_vw', 'select');
-- For Analyzer reporting
grant select on cashnet_log_vw to ucla_preaddb;

-- END of Ticket 24586: Add logging support for CashNet

/***********************************************************  
*
* Ticket 24587: Add support for making full payments via one procedure
*
***********************************************************/

/********************
apply_full_payment procedure
********************/
create or replace procedure apply_full_payment (
  p_invoice_number in payment.invoice_number%type
, p_payment_type_id in payment_type.payment_type_id%type
, p_user_name in staff_user.user_name%type
) as
  v_balance_due invoice_vw.balance_due%type;
  THIS_PROC_NAME constant varchar2(30) := 'apply_full_payment';
begin
  --if user_has_privilege(p_user_name, THIS_PROC_NAME, get_invoice_status(p_invoice_number)) = 'N' then
  if user_has_privilege(p_user_name, THIS_PROC_NAME) = 'N' then
    raise_application_error(application_errors.NOT_ALLOWED, p_user_name || ' cannot run procedure ' || THIS_PROC_NAME);
  end if;

  -- Get balance due as payment will be for this amount
  select balance_due into v_balance_due
    from invoice_vw
    where invoice_number = p_invoice_number
  ;
  
  -- Make the payment
  insert_payment(p_invoice_number, v_balance_due, p_payment_type_id, p_user_name);
  
  -- Change invoice status to Paid
  update_invoice(p_invoice_number, 'Paid', p_user_name);
  
end apply_full_payment;
/

-- Create grants
exec allow_access('invoice_service', 'apply_full_payment', 'execute');
-- Define privilege for this procedure
insert into invoice_privilege values ('apply_full_payment');
-- Associate this procedure with its role(s)
insert into role_privilege_status (role_name, privilege_name, status) values ('e-commerce', 'apply_full_payment', null);
-- Associate procedures called by this one with role
insert into role_privilege_status (role_name, privilege_name, status) values ('e-commerce', 'insert_payment', 'Unpaid');
insert into role_privilege_status (role_name, privilege_name, status) values ('e-commerce', 'insert_payment', 'Partially Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('e-commerce', 'update_invoice', 'Unpaid');
insert into role_privilege_status (role_name, privilege_name, status) values ('e-commerce', 'update_invoice', 'Partially Paid');
-- Allow status changes by e-commerce role
insert into invoice_status_change values ('Partially Paid', 'Paid', 'e-commerce');
insert into invoice_status_change values ('Unpaid', 'Paid', 'e-commerce');
commit;

-- END of Ticket 24587: Add support for making full payments via one procedure

/***********************************************************  
*
* Ticket 25552: Modify invoice_line_vw view to add require_custom_price column
*
***********************************************************/

/********************
invoice_line_vw view
********************/
create or replace view invoice_line_vw as
select
  li.invoice_number
, li.location_service_id
, li.line_number
, li.quantity
, li.unit_price
, li.total_price
, li.created_by
, li.created_date
, ls.taxable
, ls.location_name
, ls.service_name
, ls.subtype_name
, ls.unit_measure
, ls.require_custom_price
from line_item li 
inner join location_service_vw ls on li.location_service_id = ls.location_service_id 
;
/

-- END of Ticket 25552: Add require_custom_price to invoice_line_vw view

/***********************************************************  
*
* Ticket 25627: Add new invoice statuses and status change rules
*
***********************************************************/
insert into invoice_status values ('Deposit Due');
insert into invoice_status values ('Deposit Paid');
insert into invoice_status values ('Final Payment Due');

-- Status change rules for each role
insert into invoice_status_change (from_status, to_status, role_name) values ('Deposit Due', 'Deposit Paid', 'e-commerce');
insert into invoice_status_change (from_status, to_status, role_name) values ('Final Payment Due', 'Paid', 'e-commerce');
insert into invoice_status_change (from_status, to_status, role_name) values ('Deposit Due', 'Canceled', 'invoice_approver');
insert into invoice_status_change (from_status, to_status, role_name) values ('Deposit Paid', 'Final Payment Due', 'invoice_approver');
insert into invoice_status_change (from_status, to_status, role_name) values ('Pending', 'Deposit Due', 'invoice_approver');
insert into invoice_status_change (from_status, to_status, role_name) values ('Deposit Paid', 'Canceled', 'payment_approver');
insert into invoice_status_change (from_status, to_status, role_name) values ('Final Payment Due', 'Canceled', 'payment_approver');
insert into invoice_status_change (from_status, to_status, role_name) values ('Paid', 'Canceled', 'payment_approver');
insert into invoice_status_change (from_status, to_status, role_name) values ('Paid', 'Partially Paid', 'payment_approver');
insert into invoice_status_change (from_status, to_status, role_name) values ('Partially Paid', 'Canceled', 'payment_approver');
insert into invoice_status_change (from_status, to_status, role_name) values ('Partially Paid', 'Unpaid', 'payment_approver');
insert into invoice_status_change (from_status, to_status, role_name) values ('Unpaid', 'Canceled', 'payment_approver');
insert into invoice_status_change (from_status, to_status, role_name) values ('Deposit Due', 'Deposit Paid', 'payment_processor');
insert into invoice_status_change (from_status, to_status, role_name) values ('Deposit Paid', 'Canceled', 'payment_processor');
insert into invoice_status_change (from_status, to_status, role_name) values ('Final Payment Due', 'Canceled', 'payment_processor');
insert into invoice_status_change (from_status, to_status, role_name) values ('Final Payment Due', 'Paid', 'payment_processor');
insert into invoice_status_change (from_status, to_status, role_name) values ('Final Payment Due', 'Partially Paid', 'payment_processor');
insert into invoice_status_change (from_status, to_status, role_name) values ('Partially Paid', 'Canceled', 'payment_processor');
insert into invoice_status_change (from_status, to_status, role_name) values ('Unpaid', 'Canceled', 'payment_processor');

-- Allow roles to change invoices with new statuses
insert into role_privilege_status (role_name, privilege_name, status) values ('e-commerce', 'update_invoice', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('e-commerce', 'update_invoice', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_approver', 'update_invoice', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_approver', 'update_invoice', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'update_invoice', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'update_invoice', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_processor', 'update_invoice', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_processor', 'update_invoice', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_processor', 'update_invoice', 'Final Payment Due');

-- invoice_approver
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_approver', 'delete_invoice_note', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_approver', 'delete_line_item_note', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_approver', 'insert_invoice_note', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_approver', 'insert_line_item_note', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_approver', 'update_invoice_note', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_approver', 'update_line_item_note', 'Deposit Due');

insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_approver', 'delete_invoice_note', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_approver', 'delete_line_item_note', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_approver', 'insert_invoice_note', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_approver', 'insert_line_item_note', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_approver', 'update_invoice_note', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_approver', 'update_line_item_note', 'Deposit Paid');

insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_approver', 'insert_line_item_adjustment', 'Deposit Paid');

insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_approver', 'delete_invoice_note', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_approver', 'delete_line_item_note', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_approver', 'insert_invoice_note', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_approver', 'insert_line_item_note', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_approver', 'update_invoice_note', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_approver', 'update_line_item_note', 'Final Payment Due');

-- invoice_preparer
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_preparer', 'delete_invoice_note', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_preparer', 'delete_line_item_note', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_preparer', 'insert_invoice_note', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_preparer', 'insert_line_item_note', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_preparer', 'update_invoice_note', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_preparer', 'update_line_item_note', 'Deposit Due');

insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_preparer', 'delete_invoice_note', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_preparer', 'delete_line_item_note', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_preparer', 'insert_invoice_note', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_preparer', 'insert_line_item_note', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_preparer', 'update_invoice_note', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_preparer', 'update_line_item_note', 'Deposit Paid');

insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_preparer', 'delete_line_item', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_preparer', 'insert_line_item', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_preparer', 'update_line_item', 'Deposit Paid');

insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_preparer', 'delete_invoice_note', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_preparer', 'delete_line_item_note', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_preparer', 'insert_invoice_note', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_preparer', 'insert_line_item_note', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_preparer', 'update_invoice_note', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('invoice_preparer', 'update_line_item_note', 'Final Payment Due');

-- payment_approver
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'delete_invoice_note', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'delete_line_item_note', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'insert_invoice_note', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'insert_line_item_note', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'update_invoice_note', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'update_line_item_note', 'Deposit Due');

insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'insert_payment', 'Deposit Due');

insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'delete_invoice_note', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'delete_line_item_note', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'insert_invoice_note', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'insert_line_item_note', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'update_invoice_note', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'update_line_item_note', 'Deposit Paid');

insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'apply_refund_adjustment', 'Deposit Paid');

insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'delete_invoice_note', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'delete_line_item_note', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'insert_invoice_note', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'insert_line_item_note', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'update_invoice_note', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'update_line_item_note', 'Final Payment Due');

insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'apply_refund_adjustment', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'cancel_invoice_tax', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'insert_invoice_adjustment', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_approver', 'insert_payment', 'Final Payment Due');

-- payment_processor
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_processor', 'delete_invoice_note', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_processor', 'delete_line_item_note', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_processor', 'insert_invoice_note', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_processor', 'insert_line_item_note', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_processor', 'update_invoice_note', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_processor', 'update_line_item_note', 'Deposit Due');

insert into role_privilege_status (role_name, privilege_name, status) values ('payment_processor', 'insert_payment', 'Deposit Due');

insert into role_privilege_status (role_name, privilege_name, status) values ('payment_processor', 'delete_invoice_note', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_processor', 'delete_line_item_note', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_processor', 'insert_invoice_note', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_processor', 'insert_line_item_note', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_processor', 'update_invoice_note', 'Deposit Paid');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_processor', 'update_line_item_note', 'Deposit Paid');

insert into role_privilege_status (role_name, privilege_name, status) values ('payment_processor', 'delete_invoice_note', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_processor', 'delete_line_item_note', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_processor', 'insert_invoice_note', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_processor', 'insert_line_item_note', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_processor', 'update_invoice_note', 'Final Payment Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('payment_processor', 'update_line_item_note', 'Final Payment Due');

insert into role_privilege_status (role_name, privilege_name, status) values ('payment_processor', 'insert_payment', 'Final Payment Due');

-- e-commerce role
insert into role_privilege_status (role_name, privilege_name, status) values ('e-commerce', 'insert_payment', 'Deposit Due');
insert into role_privilege_status (role_name, privilege_name, status) values ('e-commerce', 'insert_payment', 'Final Payment Due');

-- Remove some now-unsupported status changes
delete from invoice_status_change where from_status = 'Pending' and to_status = 'Canceled' and role_name = 'invoice_approver';
delete from invoice_status_change where from_status = 'Unpaid' and to_status = 'Canceled' and role_name = 'payment_approver';

-- Remove some now-unsupported privileges
delete from role_privilege_status where role_name = 'payment_approver' and privilege_name = 'apply_refund_adjustment' and status = 'Unpaid';
delete from role_privilege_status where role_name = 'payment_approver' and privilege_name = 'insert_payment' and status = 'Pending';
delete from role_privilege_status where role_name = 'payment_processor' and privilege_name = 'insert_payment' and status = 'Pending';

delete from role_privilege_status where role_name = 'payment_processor' and privilege_name = 'insert_invoice_adjustment' and status = 'Unpaid';
delete from role_privilege_status where role_name = 'payment_processor' and privilege_name = 'insert_invoice_adjustment' and status = 'Partially Paid';
delete from role_privilege_status where role_name = 'payment_processor' and privilege_name = 'insert_invoice_adjustment' and status = 'Paid';

commit;
-- END of Ticket 25627: Add new invoice statuses and status change rules

/***********************************************************  
*
* Ticket 25634: Add city-level tax to LibBill
*
***********************************************************/
-- New rate type for Santa Monica
insert into tax_rate_type (rate_name) values ('santa_monica_city');
commit;

-- Add new rate: 0.5%, effective as soon as implemented
begin
  insert_tax_rate (
    p_rate_name => 'santa_monica_city'
  , p_rate => 0.005
  , p_start_date => sysdate
  , p_end_date => NULL
  , p_user_name => 'crt'
  )
  ;
end;
/

/***********************************************************  
* Restructure zip code table to handle any number of rates per zip code
***********************************************************/

-- Drop primary key for now; different one will be created later
alter table taxable_zip_code drop primary key drop index;

--alter table taxable_zip_code drop constraint taxable_zip_code_pk;
-- Index was apparently created separately, so must also be dropped separately
--drop index taxable_zip_code_pk;

-- New empty column for tax rates, will add data and constraints later
alter table taxable_zip_code add tax_rate_name varchar2(20);

-- All zip codes in this table are taxable at state level
update taxable_zip_code set tax_rate_name = 'california';

-- Enable null constraint on tax_rate_name
alter table taxable_zip_code modify tax_rate_name not null;

-- Add new primary key
alter table taxable_zip_code add constraint taxable_zip_code_pk primary key (zip_code, tax_rate_name);

-- Add rows for zip codes which are taxable at LA county level
insert into taxable_zip_code (zip_code, la_county_taxable, california_taxable, tax_rate_name)
  select zip_code, 'Y', 'Y', 'la_county'
  from taxable_zip_code
  where la_county_taxable = 'Y'
;

-- Drop obsolete columns
alter table taxable_zip_code drop column la_county_taxable;
alter table taxable_zip_code drop column california_taxable;

-- Add rows for zip codes taxable at Santa Monica city level
insert into taxable_zip_code (zip_code, tax_rate_name)
  select distinct zip_code, 'santa_monica_city'
  from taxable_zip_code
  where zip_code between '90401' and '90411'
;

-- Add foreign key constraint for tax rate
alter table taxable_zip_code add constraint tax_rate_name_type_fk foreign key (tax_rate_name) references tax_rate_type (rate_name);

commit;

/***********************************************************  
* Add more generic internal function for tax rate by zip code
* Drop too-specific internal functions, now obsolete
***********************************************************/
create or replace function get_tax_rate_by_zip_code (
  p_zip_code in taxable_zip_code.zip_code%type
, p_tax_rate_name tax_rate.rate_name%type
, p_invoice_date in invoice.invoice_date%type
) return number as
  m_taxable number;
  m_tax_rate tax_rate.rate%type := 0;
begin
  select
    count(*) 
  into m_taxable
  from taxable_zip_code
  where zip_code = p_zip_code
  and tax_rate_name = p_tax_rate_name;

  if m_taxable = '1' then
    m_tax_rate := get_tax_rate(p_tax_rate_name, p_invoice_date);
  end if;
  return m_tax_rate;

-- if select ... into found no rows this "silent" exception is thrown, so return default of 0 here
exception
  when no_data_found then
    return m_tax_rate;
end get_tax_rate_by_zip_code;
/

drop function get_county_tax_by_zip_code;
drop function get_state_tax_by_zip_code;

/***********************************************************  
* Update procedures to insert/update the new table structure
***********************************************************/
create or replace procedure insert_taxable_zip_code (
  p_zip_code in taxable_zip_code.zip_code%type
, p_tax_rate_name in taxable_zip_code.tax_rate_name%type
, p_user_name in staff_user.user_name%type
) as
  THIS_PROC_NAME constant varchar2(30) := 'insert_taxable_zip_code';
begin
  if user_has_privilege(p_user_name, THIS_PROC_NAME) = 'N' then
    raise_application_error(application_errors.NOT_ALLOWED, p_user_name || ' cannot run procedure ' || THIS_PROC_NAME);
  end if;

  insert into taxable_zip_code (zip_code, tax_rate_name)
    values (p_zip_code, p_tax_rate_name);
end insert_taxable_zip_code;
/

create or replace procedure update_taxable_zip_code (
  p_zip_code in taxable_zip_code.zip_code%type
, p_old_tax_rate_name in taxable_zip_code.tax_rate_name%type
, p_new_tax_rate_name in taxable_zip_code.tax_rate_name%type
, p_user_name in staff_user.user_name%type
) as
  THIS_PROC_NAME constant varchar2(30) := 'update_taxable_zip_code';
begin
  if user_has_privilege(p_user_name, THIS_PROC_NAME) = 'N' then
    raise_application_error(application_errors.NOT_ALLOWED, p_user_name || ' cannot run procedure ' || THIS_PROC_NAME);
  end if;

  update taxable_zip_code set
    tax_rate_name = p_new_tax_rate_name
  where zip_code = p_zip_code
  and tax_rate_name = p_old_tax_rate_name;
end update_taxable_zip_code;
/

/***********************************************************  
* Update invoice table & view to handle city-level taxes
***********************************************************/

-- Add new column for city-level taxes on invoices
alter table invoice add city_tax number(10,2) default 0 not null;

-- Add it to invoice_vw
create or replace view invoice_vw as
select 
  i.invoice_number
, i.invoice_date
, i.status
, i.total_amount
, i.la_county_tax
, i.california_tax
, i.city_tax
, i.line_item_total
, i.taxable_total
, i.nontaxable_total
, calculate_balance_due(i.invoice_number) as balance_due
, i.created_by
, i.created_date
, i.patron_id
, i.patron_on_premises
, l.department_number
, l.location_name
, l.phone_number
from invoice i
inner join location l on i.location_id = l.location_id
;

-- Modify procedure to calculate and store taxes
create or replace procedure update_invoice_taxes (
  p_invoice_number in invoice.invoice_number%type
) as
  v_invoice_date invoice.invoice_date%type;
  v_on_premises invoice.patron_on_premises%type;
  v_patron_zip_code vger_support.ucladb_patrons.perm_zip%type;
  v_nontaxable_amount invoice.nontaxable_total%type := 0;
  v_taxable_amount invoice.taxable_total%type := 0;
  v_california_tax_amount invoice.california_tax%type := 0;
  v_la_county_tax_amount invoice.la_county_tax%type := 0;
  v_city_tax_amount invoice.city_tax%type := 0;
begin
  select 
    patron_on_premises, invoice_date
    into v_on_premises, v_invoice_date
    from invoice
    where invoice_number = p_invoice_number;
  
  if (v_on_premises = 'Y') then
    v_patron_zip_code := get_application_setting('ucla_zip_code');
  else
    -- TODO: just checking perm zip for now, probably need to check temp_zip first
    -- Naive: grab the first 5 characters of zip code, no checking for validity yet
    --  This regexp seems correct for US zips: '^[0-9]{5}[-]{0,1}([0-9]{4}){0,1}$'
    select substr(perm_zip, 1, 5)
      into v_patron_zip_code
      from vger_support.ucladb_patrons p
      inner join invoice i on p.patron_id = i.patron_id
      where i.invoice_number = p_invoice_number;
  end if;
  
  v_nontaxable_amount := get_nontaxable_total(p_invoice_number);
  v_taxable_amount := get_taxable_total(p_invoice_number);
  v_california_tax_amount := v_taxable_amount * get_tax_rate_by_zip_code(v_patron_zip_code, 'california', v_invoice_date);
  v_la_county_tax_amount := v_taxable_amount * get_tax_rate_by_zip_code(v_patron_zip_code, 'la_county', v_invoice_date);
  -- TODO: make this more generic by pulling the city tax rate name (if any) from taxable_zip_code
  -- However, only one taxable city defined so far so hard-coding for now
  v_city_tax_amount := v_taxable_amount * get_tax_rate_by_zip_code(v_patron_zip_code, 'santa_monica_city', v_invoice_date);
  
  update invoice set
    california_tax = v_california_tax_amount
  , la_county_tax = v_la_county_tax_amount
  , city_tax = v_city_tax_amount
  , nontaxable_total = v_nontaxable_amount
  , taxable_total = v_taxable_amount
  where invoice_number = p_invoice_number;
  commit;
  
end update_invoice_taxes;
/

-- Modify procedure to update and store invoice totals (including taxable amounts)
create or replace procedure update_invoice_total (
  p_invoice_number in varchar2
) as
  new_invoice_total number := 0;
begin
  select taxable_total + nontaxable_total + california_tax + la_county_tax + city_tax
    into new_invoice_total
    from invoice
    where invoice_number = p_invoice_number;
  
  update invoice
    set total_amount = new_invoice_total
  , line_item_total = taxable_total + nontaxable_total
    where invoice_number = p_invoice_number;
  commit;
end update_invoice_total;
/

-- Modify procedure to cancel taxes from invoices
create or replace procedure cancel_invoice_tax (
  p_invoice_number in invoice.invoice_number%type
, p_user_name in staff_user.user_name%type
, p_adjustment_reason invoice_adjustment.adjustment_reason%type := 'Canceled sales tax'
) as
  v_amount invoice_adjustment.adjustment_amount%type;
  v_adjustment_type invoice_adjustment.adjustment_type%type := 'CANCEL TAX';
  THIS_PROC_NAME constant varchar2(30) := 'cancel_invoice_tax';
begin
  if user_has_privilege(p_user_name, THIS_PROC_NAME, get_invoice_status(p_invoice_number)) = 'N' then
    raise_application_error(application_errors.NOT_ALLOWED, p_user_name || ' cannot run procedure ' || THIS_PROC_NAME);
  end if;

  select la_county_tax + california_tax + city_tax into v_amount
    from invoice_vw
    where invoice_number = p_invoice_number;

  -- Removing tax: adjustment amount is the negative of the taxes
  v_amount := 0 - v_amount;
  
  if v_amount != 0 then
    insert into invoice_adjustment (
      invoice_number, created_by, adjustment_amount, adjustment_type, adjustment_reason)
      values (p_invoice_number, p_user_name, v_amount, v_adjustment_type, p_adjustment_reason)
    ;
    -- Now update the invoice amounts to include info for the whole invoice
    update_invoice_amounts(p_invoice_number);
  end if;

end cancel_invoice_tax;
/

-- END of Ticket 25634: Add city-level tax to LibBill

/***********************************************************  
*
* Ticket 19708: Add item codes for taxes
*
***********************************************************/

-- Add column with nulls allowed, for now
alter table tax_rate_type add item_code char(12); 

-- Add the codes
update tax_rate_type set item_code = '49930STATE' where rate_name = 'california';
update tax_rate_type set item_code = '49930CNTY' where rate_name = 'la_county';
update tax_rate_type set item_code = '49930SMTAX' where rate_name = 'santa_monica_city';
commit;

-- Enable null constraint
alter table tax_rate_type modify item_code not null;

-- Update view to include item codes for taxes
create or replace view line_item_code_vw as
select
  li.invoice_number
, ls.item_code
, sum(li.total_price) as total_price
from line_item li
inner join location_service ls on li.location_service_id = ls.location_service_id
group by li.invoice_number, ls.item_code
union all
select
  invoice_number
, case 
    when city_tax > 0 then (select item_code from tax_rate_type where rate_name = 'santa_monica_city')
    when la_county_tax > 0 then (select item_code from tax_rate_type where rate_name = 'la_county')
    when california_tax > 0 then (select item_code from tax_rate_type where rate_name = 'california')
  end as item_code
, california_tax + la_county_tax + city_tax as total_price
from invoice
;
/

-- END of Ticket 19708: Add item codes for taxes

/***********************************************************  
*
* Ticket 25702: Add new role to LibBill for hybrid invoice preparer/approver
*
***********************************************************/

-- New role, to have privileges of both invoice_approver and invoice_preparer
insert into invoice_role (role_name) values ('invoice_prep_app');

-- Grant status change rights based on the source roles
insert into invoice_status_change (from_status, to_status, role_name)
  select distinct
    from_status, to_status, 'invoice_prep_app' as role_name
  from invoice_status_change
  where role_name in ('invoice_approver', 'invoice_preparer')
;

-- Grant privileges on procedures based on the source roles
insert into role_privilege_status (role_name, privilege_name, status)
  select distinct
    'invoice_prep_app' as role_name, privilege_name, status
  from role_privilege_status where role_name in ('invoice_approver', 'invoice_preparer')
;

-- In DEV/TEST, add role-based user for testing
exec insert_staff_user('test_inv_prep_app', 'test_iap', 'crt', 'Test', 'Invoice Preparer/Approver', 'invoice_prep_app');

commit;

-- END of Ticket 25702: Add new role to LibBill for hybrid invoice preparer/approver

/***********************************************************  
*
* Ticket 25633: Copy and maintain relevant Voyager patron data in LibBill
*
***********************************************************/

-- New table to hold minimal copy of patron data
create table patron_stub (
  patron_id int not null
, normal_last_name varchar2(30)
, normal_first_name varchar2(30)
, constraint patron_stub_pk primary key (patron_id)
);

-- Copy existing data from ucladb for LibBill patrons
-- Will not capture data for patrons who have already been deleted from ucladb
insert into patron_stub
select patron_id, normal_last_name, normal_first_name
from ucladb.patron
where patron_id in (select distinct patron_id from invoice)
;
commit;

-- New view, replacing vger_support.ucladb_patrons
create or replace view patron_vw as
-- Combination of LibBill patrons (patron_stub) and ucladb patrons
with patrons as (
  select patron_id, normal_last_name, normal_first_name from patron_stub
  union
  select patron_id, normal_last_name, normal_first_name from ucladb.patron
)
select distinct -- work around bad Voyager data
  p.patron_id
, pb.patron_barcode
, p.normal_last_name
, p.normal_first_name
-- Not in patron_stub so must explicitly fetch from ucladb.patron
, (select institution_id from ucladb.patron where patron_id = p.patron_id) as institution_id
, coalesce(pa_p.address_line1, 'Voyager patron record deleted') as perm_address1
, pa_p.address_line2 as perm_address2
, pa_p.address_line3 as perm_address3
, pa_p.address_line4 as perm_address4
, pa_p.address_line5 as perm_address5
, pa_p.city as perm_city
, pa_p.state_province as perm_state
, pa_p.zip_postal as perm_zip
, pa_p.country as perm_country
, pa_t.address_line1 as temp_address1
, pa_t.address_line2 as temp_address2
, pa_t.address_line3 as temp_address3
, pa_t.address_line4 as temp_address4
, pa_t.address_line5 as temp_address5
, pa_t.city as temp_city
, pa_t.state_province as temp_state
, pa_t.zip_postal as temp_zip
, pa_t.country as temp_country
, pa_t.effect_date as temp_effect_date
, pa_t.expire_date as temp_expire_date
, pa_e.address_line1 as email
, pp.phone_number
, pg.patron_group_display
, case               
    when pb.patron_group_id in (1,3,4,6,7,8,9,10,12,13,14,15,16,18,19,26,30,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54) then 1
    else 0
  end as uc_community
from 
    patrons p
    -- Remaining data comes from UCLADB
    left outer join ucladb.patron_barcode pb on p.patron_id = pb.patron_id and pb.barcode_status = 1      
    left outer join ucladb.patron_group pg on pb.patron_group_id = pg.patron_group_id
    left outer join ucladb.patron_address pa_p on p.patron_id = pa_p.patron_id and pa_p.address_type = 1 --Permanent
    left outer join ucladb.patron_address pa_t on p.patron_id = pa_t.patron_id and pa_t.address_type = 2 --Temporary
    left outer join ucladb.patron_address pa_e on p.patron_id = pa_e.patron_id and pa_e.address_type = 3 --EMail
    left outer join ucladb.patron_phone pp on pa_p.address_id = pp.address_id and pp.phone_type = 1 --Primary
;
/

-- Create grants
exec allow_access('invoice_service', 'patron_vw', 'select');
-- -- For Analyzer reporting
grant select on patron_vw to ucla_preaddb;

-- Update function to use new view
create or replace function is_patron_uc (
  p_patron_id in invoice.patron_id%type
) return patron_vw.uc_community%type as
  -- 1 (true) or 0 (false)
  v_uc_community patron_vw.uc_community%type;
begin
  -- Some patrons have multiple groups; return 1 (true) if any are true, else 0 (false)
  select max(uc_community) into v_uc_community
    from patron_vw
    where patron_id = p_patron_id;
  
  return v_uc_community;
end is_patron_uc;
/

-- Update procedure to use new view
create or replace procedure update_invoice_taxes (
  p_invoice_number in invoice.invoice_number%type
) as
  v_invoice_date invoice.invoice_date%type;
  v_on_premises invoice.patron_on_premises%type;
  v_patron_zip_code patron_vw.perm_zip%type;
  v_nontaxable_amount invoice.nontaxable_total%type := 0;
  v_taxable_amount invoice.taxable_total%type := 0;
  v_california_tax_amount invoice.california_tax%type := 0;
  v_la_county_tax_amount invoice.la_county_tax%type := 0;
  v_city_tax_amount invoice.city_tax%type := 0;
begin
  select 
    patron_on_premises, invoice_date
    into v_on_premises, v_invoice_date
    from invoice
    where invoice_number = p_invoice_number;
  
  if (v_on_premises = 'Y') then
    v_patron_zip_code := get_application_setting('ucla_zip_code');
  else
    -- TODO: just checking perm zip for now, probably need to check temp_zip first
    -- Naive: grab the first 5 characters of zip code, no checking for validity yet
    --  This regexp seems correct for US zips: '^[0-9]{5}[-]{0,1}([0-9]{4}){0,1}$'
    select substr(perm_zip, 1, 5)
      into v_patron_zip_code
      from patron_vw p
      inner join invoice i on p.patron_id = i.patron_id
      where i.invoice_number = p_invoice_number;
  end if;
  
  v_nontaxable_amount := get_nontaxable_total(p_invoice_number);
  v_taxable_amount := get_taxable_total(p_invoice_number);
  v_california_tax_amount := v_taxable_amount * get_tax_rate_by_zip_code(v_patron_zip_code, 'california', v_invoice_date);
  v_la_county_tax_amount := v_taxable_amount * get_tax_rate_by_zip_code(v_patron_zip_code, 'la_county', v_invoice_date);
  -- TODO: make this more generic by pulling the city tax rate name (if any) from taxable_zip_code
  -- However, only one taxable city defined so far so hard-coding for now
  v_city_tax_amount := v_taxable_amount * get_tax_rate_by_zip_code(v_patron_zip_code, 'santa_monica_city', v_invoice_date);
  
  update invoice set
    california_tax = v_california_tax_amount
  , la_county_tax = v_la_county_tax_amount
  , city_tax = v_city_tax_amount
  , nontaxable_total = v_nontaxable_amount
  , taxable_total = v_taxable_amount
  where invoice_number = p_invoice_number;
  commit;
  
end update_invoice_taxes;
/

-- END of Ticket 25633: Copy and maintain relevant Voyager patron data in LibBill

/***********************************************************  
*
* Ticket 26204: Calculate LibBill amounts correctly on status Deposit Paid
*
***********************************************************/

-- New supporting function
create or replace function invoice_total_is_updateable (
  p_invoice_number in invoice.invoice_number%type
) return char as
  v_invoice_status invoice.status%type;
  v_updateable char(1) := 'N';
begin
  v_invoice_status := get_invoice_status(p_invoice_number);
  
  if v_invoice_status in ('Pending', 'Deposit Paid') then
    v_updateable := 'Y';
  end if;
  
  return v_updateable;
end invoice_total_is_updateable;
/

-- Update procedure to use new function
create or replace procedure update_invoice_amounts (
  p_invoice_number in invoice.invoice_number%type
) as
begin
  update_invoice_taxes(p_invoice_number);

  -- Invoice total should only be updated for certain invoice statuses
  if invoice_total_is_updateable(p_invoice_number) = 'Y' then
    update_invoice_total(p_invoice_number);
  end if;

end update_invoice_amounts;
/

-- END of Ticket 26204: Calculate LibBill amounts correctly on status Deposit Paid

/***********************************************************  
*
* Ticket 26533: Change LibBill quote deposit logic
*
***********************************************************/

-- Add an application setting for percentage of total to bill on Deposit Due (aka quote) invoices
insert into application_setting (setting_name, setting_value) values ('quote_percentage_due', '0.50');
commit;

-- Change balance due calculation for Deposit Due invoices, using new application setting and logic
create or replace function calculate_balance_due (
  p_invoice_number in varchar2
) return number as
  v_balance_due number := 0;
  v_total_amount number := 0;
  v_total_tax number := 0;
  v_total_payments number := 0;
  v_invoice_adjustments number := 0;
  v_line_adjustments number := 0;
  v_total_adjustments number := 0;
  v_invoice_status invoice.status%type;
  v_quote_percentage number := 100;
begin
  select total_amount, total_tax into v_total_amount, v_total_tax
    from invoice
    where invoice_number = p_invoice_number;

  select nvl(sum(amount), 0) into v_total_payments
    from payment
    where invoice_number = p_invoice_number;

  select nvl(sum(adjustment_amount), 0) into v_invoice_adjustments
    from invoice_adjustment
    where invoice_number = p_invoice_number;

  select nvl(sum(adjustment_amount), 0) into v_line_adjustments
    from line_item_adjustment
    where invoice_number = p_invoice_number;

  v_total_adjustments := v_invoice_adjustments + v_line_adjustments;
  
  -- Start with default calculation which applies to most statuses
  v_balance_due := v_total_amount + v_total_adjustments - v_total_payments;

  -- Different rules based on invoice status
  v_invoice_status := get_invoice_status(p_invoice_number);

  -- Pending invoices should not have balance due
  if v_invoice_status = 'Pending' then
    v_balance_due := 0;
  end if;

  -- Deposit Due invoices have a fixed percentage of balance due
  -- Taxes are *not* included in the total for these invoices
  if v_invoice_status = 'Deposit Due' then
    v_quote_percentage := get_application_setting('quote_percentage_due');
    v_balance_due := round( ((v_balance_due - v_total_tax) * v_quote_percentage), 2);
  end if;
  
  return v_balance_due;
end calculate_balance_due;
/

-- Change apply_full_payment procedure to use Deposit Due/Paid logic
create or replace procedure apply_full_payment (
  p_invoice_number in payment.invoice_number%type
, p_payment_type_id in payment_type.payment_type_id%type
, p_user_name in staff_user.user_name%type
) as
  v_balance_due invoice_vw.balance_due%type;
  v_old_invoice_status invoice_vw.status%type;
  v_new_invoice_status invoice_vw.status%type;
  THIS_PROC_NAME constant varchar2(30) := 'apply_full_payment';
begin
  --if user_has_privilege(p_user_name, THIS_PROC_NAME, get_invoice_status(p_invoice_number)) = 'N' then
  if user_has_privilege(p_user_name, THIS_PROC_NAME) = 'N' then
    raise_application_error(application_errors.NOT_ALLOWED, p_user_name || ' cannot run procedure ' || THIS_PROC_NAME);
  end if;

  -- Get balance due as payment will be for this amount
  select balance_due, status into v_balance_due, v_old_invoice_status
    from invoice_vw
    where invoice_number = p_invoice_number
  ;
  
  -- Make the payment
  insert_payment(p_invoice_number, v_balance_due, p_payment_type_id, p_user_name);
  
  -- Change invoice status to Paid or Deposit Paid, depending on starting status
  if v_old_invoice_status = 'Deposit Due' then
    v_new_invoice_status := 'Deposit Paid';
  else
    v_new_invoice_status := 'Paid';
  end if;
  update_invoice(p_invoice_number, v_new_invoice_status, p_user_name);
  
end apply_full_payment;
/

-- END of Ticket 26533: Change LibBill quote deposit logic

/***********************************************************  
*
* Ticket 26532: Change tax calculation in LibBill
*
***********************************************************/

-- This alters some of the changes made earlier in the 1.5 -> 2.0 upgrade
-- (Ticket 25634: Add city-level tax to LibBill)
-- LBS changed their minds.

-- Add a new column to invoice, for the total tax; this will replace the separate columns 
alter table invoice add total_tax number(10,2) default 0 not null;

-- Update the new column with the sum of existing taxes
update invoice set total_tax = california_tax + la_county_tax + city_tax;
commit;

-- Remove the now-obsolete separate tax columns
alter table invoice drop column california_tax;
alter table invoice drop column la_county_tax;
alter table invoice drop column city_tax;

-- Add column to capture tax rate: nullable, as not all invoices have taxes
alter table invoice add tax_rate_id int;

-- Add foreign key constraint for tax rate
alter table invoice add constraint invoice_tax_rate_id_fk foreign key (tax_rate_id) references tax_rate (rate_id);

-- Update invoice_vw to use new tax column
create or replace view invoice_vw as
select 
  i.invoice_number
, i.invoice_date
, i.status
, i.total_amount
, i.total_tax
, i.line_item_total
, i.taxable_total
, i.nontaxable_total
, calculate_balance_due(i.invoice_number) as balance_due
, i.created_by
, i.created_date
, i.patron_id
, i.patron_on_premises
, l.department_number
, l.location_name
, l.phone_number
from invoice i
inner join location l on i.location_id = l.location_id
;
/

-- Update update_invoice_total procedure to use new tax column
create or replace procedure update_invoice_total (
  p_invoice_number in varchar2
) as
  new_invoice_total number := 0;
begin
  select taxable_total + nontaxable_total + total_tax
    into new_invoice_total
    from invoice
    where invoice_number = p_invoice_number;
  
  update invoice
    set total_amount = new_invoice_total
  , line_item_total = taxable_total + nontaxable_total
    where invoice_number = p_invoice_number;
  commit;
end update_invoice_total;
/

----- UPDATE_INVOICE_AMOUNTS IS INVALID HERE -----
-- Update cancel_invoice_tax procedure to use new tax column
create or replace procedure cancel_invoice_tax (
  p_invoice_number in invoice.invoice_number%type
, p_user_name in staff_user.user_name%type
, p_adjustment_reason invoice_adjustment.adjustment_reason%type := 'Canceled sales tax'
) as
  v_amount invoice_adjustment.adjustment_amount%type;
  v_adjustment_type invoice_adjustment.adjustment_type%type := 'CANCEL TAX';
  THIS_PROC_NAME constant varchar2(30) := 'cancel_invoice_tax';
begin
  if user_has_privilege(p_user_name, THIS_PROC_NAME, get_invoice_status(p_invoice_number)) = 'N' then
    raise_application_error(application_errors.NOT_ALLOWED, p_user_name || ' cannot run procedure ' || THIS_PROC_NAME);
  end if;

  select total_tax into v_amount
    from invoice_vw
    where invoice_number = p_invoice_number;

  -- Removing tax: adjustment amount is the negative of the taxes
  v_amount := 0 - v_amount;
  
  if v_amount != 0 then
    insert into invoice_adjustment (
      invoice_number, created_by, adjustment_amount, adjustment_type, adjustment_reason)
      values (p_invoice_number, p_user_name, v_amount, v_adjustment_type, p_adjustment_reason)
    ;
    -- Now update the invoice amounts to include info for the whole invoice
    update_invoice_amounts(p_invoice_number);
  end if;

end cancel_invoice_tax;
/

-- Tax rates are now cumulative instead of separate: city = city + county + state, etc.
-- Modify existing la_county rate to go with expired california rate
begin
  update_tax_rate (
    p_rate_id => 3
  , p_rate => 0.0825 + 0.015
  , p_end_date => to_date('2011-06-30', 'YYYY-MM-DD')
  , p_user_name => 'crt'
  )
  ;
end;
/

-- Add new (current) la_county rate to go with current california rate
begin
  insert_tax_rate (
    p_rate_name => 'la_county'
  , p_rate => 0.0725 + 0.015
  , p_start_date => to_date('2011-07-01', 'YYYY-MM-DD')
  , p_end_date => NULL
  , p_user_name => 'crt'
  )
  ;
end;
/

-- Delete not-yet-production santa_monica_city rate from earlier ticket; will add new one
delete from tax_rate where rate_name = 'santa_monica_city';
-- Add new (current) santa_monica_city rate to go with current la_county (and california) rate
begin
  insert_tax_rate (
    p_rate_name => 'santa_monica_city'
  , p_rate => 0.0725 + 0.015 + 0.005
  , p_start_date => sysdate
  , p_end_date => NULL
  , p_user_name => 'crt'
  )
  ;
end;
/
commit;

-- Progressively remove now-extra rows, leaving only the most-specific rate for each zip code
delete from taxable_zip_code
  where tax_rate_name != 'santa_monica_city'
  and zip_code in (
    select zip_code from taxable_zip_code
    where tax_rate_name = 'santa_monica_city'
  )
;
-- 22 rows
delete from taxable_zip_code
  where tax_rate_name != 'la_county'
  and zip_code in (
    select zip_code from taxable_zip_code
    where tax_rate_name = 'la_county'
  )
;
-- 1888 rows
commit;

-- New internal function to get tax rate id an invoice will use
create or replace function get_tax_rate_id (
  p_patron_id in invoice.patron_id%type
, p_patron_on_premises in invoice.patron_on_premises%type
, p_invoice_date in invoice.invoice_date%type
) return number as
  v_patron_zip_code patron_vw.perm_zip%type;
  v_tax_rate_name tax_rate.rate_name%type;
  v_tax_rate_id tax_rate.rate_id%type;
begin
  -- If patron is on premises, we use the UCLA zip code to determine tax rate
  -- Otherwise, get the patron's zip code from his Voyager patron record
  if (p_patron_on_premises = 'Y') then
    v_patron_zip_code := get_application_setting('ucla_zip_code');
  else
    -- TODO: just checking perm zip for now, probably need to check temp_zip first
    -- Naive: grab the first 5 characters of zip code, no checking for validity yet
    --  This regexp seems correct for US zips: '^[0-9]{5}[-]{0,1}([0-9]{4}){0,1}$'
    -- Max() in case of multiple rows (bad data...)
    select max(substr(perm_zip, 1, 5))
      into v_patron_zip_code
      from patron_vw
      where patron_id = p_patron_id;
  end if;

  -- Get the tax rate associated with the zip code
  select tax_rate_name 
    into v_tax_rate_name
    from taxable_zip_code
    where zip_code = v_patron_zip_code;
    
  -- Get the tax rate id for this rate, effective as of this invoice date
  select rate_id
    into v_tax_rate_id
    from tax_rate
    where rate_name = v_tax_rate_name
    and start_date <= p_invoice_date
    and (end_date >= p_invoice_date or end_date is null);
  
  return v_tax_rate_id;
  
-- if select ... into found no rows this "silent" exception is thrown, so return default of null (no rate) here
exception
  when no_data_found then
    return v_tax_rate_id;
  
end get_tax_rate_id;
/

-- Change insert_invoice procedure to use new get_tax_rate_id function
create or replace procedure insert_invoice (
  p_location_code in location.location_code%type
, p_invoice_date in invoice.invoice_date%type
, p_status in invoice.status%type := 'Pending'
, p_user_name in staff_user.user_name%type
, p_patron_id in invoice.patron_id%type
, p_patron_on_premises in invoice.patron_on_premises%type
, p_new_invoice_number out invoice.invoice_number%type
) as
  -- To work around JDBC-related problem storing CHAR(10) in passed-in output parameter
  v_new_invoice_number invoice.invoice_number%type;
  v_location_id invoice.location_id%type;
  v_patron_exists int;
  THIS_PROC_NAME constant varchar2(30) := 'insert_invoice';
begin
  if user_has_privilege(p_user_name, THIS_PROC_NAME) = 'N' then
    raise_application_error(application_errors.NOT_ALLOWED, p_user_name || ' cannot run procedure ' || THIS_PROC_NAME);
  end if;

  -- Could throw NO_DATA_FOUND, caught below
  select location_id into v_location_id
    from location
    where location_code = p_location_code;

  -- Capture minimal patron data, if we don't already have it, in case patron is later deleted from ucladb
  select count(*) into v_patron_exists
    from patron_stub
    where patron_id = p_patron_id;
    
  if v_patron_exists = 0 then
    insert into patron_stub (patron_id, normal_last_name, normal_first_name)
      -- Could be multiple rows in patron_vw (multiple groups, addresses)
      select distinct patron_id, normal_last_name, normal_first_name
      from patron_vw
      where patron_id = p_patron_id;
  end if;
    
  -- Get next invoice number and add the invoice
  v_new_invoice_number := get_next_invoice_number(p_location_code);
  insert into invoice (
    invoice_number
  , invoice_date
  , status
  , created_by
  , patron_id
  , patron_on_premises
  , location_id
  , tax_rate_id
  ) values (
    v_new_invoice_number
  , p_invoice_date
  , p_status
  , p_user_name
  , p_patron_id
  , p_patron_on_premises
  , v_location_id
  , get_tax_rate_id(p_patron_id, p_patron_on_premises, p_invoice_date)
  );
  
  -- For output to caller, if all went well
  p_new_invoice_number := v_new_invoice_number;

exception
  when NO_DATA_FOUND then
    raise_application_error(application_errors.INVALID_DATA, 
      'Invalid location code: ' || p_location_code);
end insert_invoice;
/

-- Change get_tax_rate function to use rate id as parameter
create or replace function get_tax_rate (
  p_tax_rate_id in tax_rate.rate_id%type
) return number as
  v_tax_rate tax_rate.rate%type := 0;
begin
  select rate 
    into v_tax_rate
    from tax_rate
    where rate_id = p_tax_rate_id;
 
  return v_tax_rate;
  
-- if select ... into found no rows this "silent" exception is thrown, so return default of 0 here
exception
  when no_data_found then
    return v_tax_rate;
  
end get_tax_rate;
/

-- Change update_invoice_taxes procedure to use revised get_tax_rate function
create or replace procedure update_invoice_taxes (
  p_invoice_number in invoice.invoice_number%type
) as
  v_tax_rate_id invoice.tax_rate_id%type;
  v_nontaxable_amount invoice.nontaxable_total%type := 0;
  v_taxable_amount invoice.taxable_total%type := 0;
  v_total_tax_amount invoice.total_tax%type := 0;
begin
  select tax_rate_id
    into v_tax_rate_id
    from invoice
    where invoice_number = p_invoice_number;
  
  v_nontaxable_amount := get_nontaxable_total(p_invoice_number);
  v_taxable_amount := get_taxable_total(p_invoice_number);
  v_total_tax_amount := v_taxable_amount * get_tax_rate(v_tax_rate_id);
  
  update invoice set
    total_tax = v_total_tax_amount
  , nontaxable_total = v_nontaxable_amount
  , taxable_total = v_taxable_amount
  where invoice_number = p_invoice_number;
  commit;
  
end update_invoice_taxes;
/

-- Delete now-obsolete function get_tax_rate_by_zip_code
drop function get_tax_rate_by_zip_code;

-- New internal function to get prorate factor for charges going to e-commerce
create or replace function get_prorate_factor (
  p_invoice_number in invoice_vw.invoice_number%type
) return number as
  v_factor number;
begin
  select
    case
      when status = 'Deposit Due' then to_number(get_application_setting('quote_percentage_due'))
      when total_amount = 0 then 1
      else (balance_due / total_amount)
    end into v_factor
  from invoice_vw
  where invoice_number = p_invoice_number;
  
  return v_factor;
end get_prorate_factor;
/

-- Change line_item_code_vw view to get tax rate name correctly and handle Deposit Due correctly
create or replace view line_item_code_vw as
select
  li.invoice_number
, ls.item_code
, sum(li.total_price) * get_prorate_factor(li.invoice_number) as total_price
from line_item li
inner join location_service ls on li.location_service_id = ls.location_service_id
group by li.invoice_number, ls.item_code
union all
select
  i.invoice_number
, trt.item_code
, total_tax * get_prorate_factor(i.invoice_number) as total_price
from invoice i
inner join tax_rate tr on i.tax_rate_id = tr.rate_id
inner join tax_rate_type trt on tr.rate_name = trt.rate_name
-- Taxes are not included for Deposit Due invoices
where i.status != 'Deposit Due'
;
/

-- Update existing invoice.tax_rate_id with appropriate values
update invoice set tax_rate_id = get_tax_rate_id(patron_id, patron_on_premises, invoice_date);
commit;

-- END of Ticket 26532: Change tax calculation in LibBill

/***********************************************************  
*
* Ticket 26655: Prevent multiple service-level item codes from being used on invoices
*
***********************************************************/
-- Add a new application error
create or replace package application_errors as
  --INVALID_INVOICE_STATUS exception;
  --pragma EXCEPTION_INIT (INVALID_INVOICE_STATUS, -20001);
  INVALID_INVOICE_STATUS int := -20001;
  INVALID_DATA int := -20002;
  NOT_ALLOWED int := -20003;
  INVALID_VERSION int := -20004;
  DUPLICATE_ITEM_CODE int := -20005;
end application_errors;
/

-- Modify insert_line_item procedure to check for duplicate item codes and throw error if appropriate
create or replace procedure insert_line_item (
  p_invoice_number in line_item.invoice_number%type
, p_location_service_id in line_item.location_service_id%type
, p_user_name in staff_user.user_name%type
, p_quantity in line_item.quantity%type
, p_unit_price in line_item.unit_price%type := 0
) as
  v_total_price line_item.total_price%type;
  v_unit_price line_item.unit_price%type;
  v_new_line_number line_item.line_number%type := 1;
  v_require_custom_price location_service.require_custom_price%type;
  v_existing_item_code location_service.item_code%type;
  v_incoming_item_code location_service.item_code%type;
  THIS_PROC_NAME constant varchar2(30) := 'insert_line_item';
begin
  if user_has_privilege(p_user_name, THIS_PROC_NAME, get_invoice_status(p_invoice_number)) = 'N' then
    raise_application_error(application_errors.NOT_ALLOWED, p_user_name || ' cannot run procedure ' || THIS_PROC_NAME);
  end if;

  /*  All line items on an invoice must have the same e-commerce item code.
      Can't enforce this via table constraints, so do it here.
  */
  
  -- Get existing item code (if any lines already exist)
  -- Wrapped in max() in case any legacy invoices have multiple item codes
  select max(item_code) into v_existing_item_code
    from line_item li
    inner join location_service ls on li.location_service_id = ls.location_service_id
    where li.invoice_number = p_invoice_number;
  
  -- Get item code for the incoming line item
  select item_code into v_incoming_item_code
    from location_service
    where location_service_id = p_location_service_id;
    
  -- Compare item codes and throw an error if they don't match
  if v_existing_item_code is not null and v_existing_item_code != v_incoming_item_code then
    raise_application_error(application_errors.DUPLICATE_ITEM_CODE, 
      'New item code ' || v_incoming_item_code || ' conflicts with existing item code ' || v_existing_item_code);
  end if;

  -- Still here?  Proceed with adding the line item
  
  -- Determine next line number for this invoice
  select coalesce(max(line_number), 0) + 1 into v_new_line_number
    from line_item
    where invoice_number = p_invoice_number;
  
  -- Determine whether this service's price can be set/overridden by the client
  select require_custom_price into v_require_custom_price
    from location_service
    where location_service_id = p_location_service_id;
  
  if v_require_custom_price = 'Y' then
    -- Must have price from client
    if p_unit_price = 0 then
      raise_application_error(application_errors.INVALID_DATA, 'Price must be non-zero');
    else
      v_unit_price :=  p_unit_price;
    end if;
  else
    -- Use what's in the location_service table; client should not provide price
    if p_unit_price != 0 then
      raise_application_error(application_errors.INVALID_DATA, 'Client should not provide price');
    else
      v_unit_price := get_price_for_service(p_invoice_number, p_location_service_id);
    end if;
  end if;
  
  v_total_price := p_quantity * v_unit_price;
  
  insert into line_item (
    invoice_number, line_number, location_service_id, quantity, unit_price, total_price, created_by)
    values (p_invoice_number, v_new_line_number, p_location_service_id, p_quantity, v_unit_price, v_total_price, p_user_name)
    ;
  
  -- TODO: commit here?
  --commit;
  -- Now update the invoice amounts to include info for the whole invoice
  update_invoice_amounts(p_invoice_number);
end insert_line_item;
/

-- END of Ticket 26655: Prevent multiple service-level item codes from being used on invoices

/***********************************************************  
* Add new payment type per dshade/crt 2012-07-16
***********************************************************/
insert into payment_type (payment_type_id, payment_type) values (5, 'dept rchg');
commit;

/***********************************************************  
* Update version setting
***********************************************************/
update application_setting 
  set setting_value = '2.0'
  where setting_name = 'version'
;
commit;

/***********************************************************  
* Recompile schema and report on errors & invalid objects
***********************************************************/
begin 
  dbms_utility.compile_schema(
    schema        => user,
    compile_all   => TRUE,
    reuse_settings => TRUE
  );
end;
/

select * from user_errors;
select * from user_objects where status != 'VALID';

/***** END *****/
